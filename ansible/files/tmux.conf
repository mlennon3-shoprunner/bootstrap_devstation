set -g default-terminal "xterm-256color"
# remap prefix
unbind C-b
set -g prefix C-Space
# jump to last active window
bind-key C-Space last-window
# act like vim
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

#Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l bash"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
#end Copy-paste integration

set -g status-bg black
set -g status-fg white
set -g status-left ""
set -g status-right "#[fg=green]#H #(date +'%a, %d %b %Y, %R')"

# Highlight active window
set-window-option -g window-status-current-bg green

# ssh interactive
bind-key S command-prompt -p "ssh: " "new-window -n %1 'ssh %1'"
set -g history-limit 90000

# bind key for synchronizing-panes
bind-key y set-window-option synchronize-panes

# toggle mouse with leader m
# mouse can be used to select panes, windows, resize, etc
set-option -g mode-mouse on
set-option -g mouse-select-pane on
set-option -g mouse-select-window on
set-option -g mouse-resize-pane on

bind m \
  set-option -g mode-mouse on \;\
  set-option -g mouse-select-pane on \;\
  set-option -g mouse-select-window on \;\
  set-option -g mouse-resize-pane on \;\
  display 'Mouse mode ENGAGED'

bind M \
  set-option -g mode-mouse off \;\
  set-option -g mouse-select-pane off \;\
  set-option -g mouse-select-window off \;\
  set-option -g mouse-resize-pane off \;\
  display 'Mouse mode DISENGAGED'

#Start numbering at 1
set -g base-index 1

setw -g aggressive-resize on

# Smart pane switching with awareness of vim splits
 is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
 bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
 bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
 bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
 bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
 bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
